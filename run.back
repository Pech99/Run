/*
package main

import (
	"fmt"
	"syscall"
	"unsafe"

	"golang.org/x/sys/windows"
)

var (
	mod                     = windows.NewLazyDLL("user32.dll")
	procGetWindowText       = mod.NewProc("GetWindowTextW")
	procGetWindowTextLength = mod.NewProc("GetWindowTextLengthW")
)

type (
	HANDLE uintptr
	HWND   HANDLE
)

func GetWindowTextLength(hwnd HWND) int {
	ret, _, _ := procGetWindowTextLength.Call(
		uintptr(hwnd))

	return int(ret)
}

func GetWindowText(hwnd HWND) string {
	textLen := GetWindowTextLength(hwnd) + 1

	buf := make([]uint16, textLen)
	procGetWindowText.Call(
		uintptr(hwnd),
		uintptr(unsafe.Pointer(&buf[0])),
		uintptr(textLen))

	return syscall.UTF16ToString(buf)
}

func getWindow(funcName string) uintptr {
	proc := mod.NewProc(funcName)
	hwnd, _, _ := proc.Call()
	return hwnd
}

func GetWindowThreadProcessId(hwnd uintptr) (uintptr, error) {
	us32 := syscall.MustLoadDLL("user32.dll")
	prc := us32.MustFindProc("GetWindowThreadProcessId")
	ret, _, err := prc.Call(hwnd, uintptr(unsafe.Pointer(&hwnd)))
	//fmt.Println("ProcessId: ", ret, " Error: ", err)
	return ret, err
}

func main() {
	hwndold := getWindow("GetForegroundWindow")
	for {
		if hwnd := getWindow("GetForegroundWindow"); hwnd != 0 && hwndold != hwnd {
			text := GetWindowText(HWND(hwnd))
			pid, _ := GetWindowThreadProcessId(hwnd)
			fmt.Print("hwnd: ", hwnd, "\t - pid: ", pid, "\t- window: ", text, "\n")
			hwndold = hwnd
		}
	}
}
*/
/*
Windows API - Window Functions
	GetParent& Lib "user32" (Byval hWnd As Long)
	GetWindow& Lib "user32" (Byval hWnd As Long, Byval wCmd As Long)
	GetWindowLong& Lib "user32" Alias "GetWindowLongA" (Byval hWnd As Long, Byval wIndx As Long)
	GetTopWindow& Lib "user32" (Byval hwnd As Long)
	GetActiveWindow& Lib "user32" Alias "GetActiveWindow" ()
	GetLastActivePopup& Lib "user32" (Byval hwnd As Long)
	GetForegroundWindow& Lib "user32" ()
	GetWindowTextLength& Lib "user32" Alias "GetWindowTextLengthA" (Byval hwnd As Long)
	GetWindowText& Lib "user32" Alias "GetWindowTextA" (Byval hwnd As Long, Byval lpstring As String, Byval lpstrlen As Long)
	GetDesktopWindow& Lib "user32" ()
	GetFocus& Lib "user32" ()
	GetWindowThreadProcessId& Lib "user32" (Byval hWnd As Long, lpdwProcessId As Long)
	SetTopWindow& Lib "user32" Alias "SetForegroundWindow" (Byval Hwnd As Long)
	SetActiveWindow& Lib "user32" (Byval Hwnd As Long)
	SetFocusAPI& Lib "user32" Alias "SetFocus" (Byval hwnd As Long)
	SetCapture& Lib "user32" (Byval hwnd As Long)
	SetForegroundWindow& Lib "user32" (Byval hwnd As Long)
	FindWindow& Lib "user32" Alias "FindWindowA" (Byval lpclassname As String, Byval lpwindowname As String)
	FindWindowClass& Lib "user32" Alias "FindWindowA" (Byval lpclassname As String, Byval dummy As Long )
	FindWindowName& Lib "user32" Alias "FindWindowA" (Byval dummy As Long, Byval lpwindowname As String)
	AnyPopup& Lib "user32" ()
	ShowWindow& Lib "user32" Alias "ShowWindow" (Byval Hwnd As Long, Byval nCmdShow As Long)
	IsIcon& Lib "user32" Alias "IsIconic" (Byval Hwnd As Long)
	UpdateWindow& Lib "user32" (Byval Hwnd As Long)

Windows API - Menu Functions
	GetCursorPos& Lib "user32" Alias "GetCursorPos" (lpPoint As POINTAPI)
	CreatePopupMenu& Lib "user32" Alias "CreatePopupMenu" ()
	AppendMenu& Lib "user32" Alias "AppendMenuA" (Byval hMenu As Long, Byval wFlags As Long, Byval wIDNewItem As Integer, Byval lpNewItem As Any)
	TrackPopupMenu& Lib "user32" Alias "TrackPopupMenu" (Byval hMenu As Long, Byval wFlags As Long, Byval x As Long, Byval y As Long, Byval nReserved As Long, Byval hwnd As Long, lprc As Rect)
	DestroyMenu& Lib "user32" Alias "DestroyMenu" (Byval hMenu As Long)
	GetMessage& Lib "user32" Alias "GetMessageA" (lpMsg As MSG, Byval hwnd As Long, Byval wMsgFilterMin As Long, Byval wMsgFilterMax As Long)

Windows API - Others
	SendMessage& Lib "user32" Alias "SendMessageA" (Byval Hwnd As Long, Byval Msg As Long, Byval wParam As Long, lParam As Long)
	SendMessageTimeOut& Lib "user32" Alias "SendMessageTimeOut" (Byval hwnd As Long, Byval msg As Long, Byval wparam As Long, Byval lparam As Long, Byval fuflags As Long, utimeout As Long, lpresult As Long)
	GetClassName& Lib "user32" Alias "GetClassNameA" (Byval hwnd As Long, Byval lpclassname As String, Byval nmaxcount As Long)
	GetOpenFileName& Lib "comdlg32.dll" Alias "GetOpenFileNameA" (OPENFILENAME As tagOPENFILENAME)
	GetSaveFileName& Lib "comdlg32.dll" Alias "GetSaveFileNameA" (OPENFILENAME As tagOPENFILENAME)
*/

package main

import (
	//sys "golang.org/x/sys/windows"
	"github.com/lxn/win"
)

func main() {

	hwnd := win.GetForegroundWindow()
	win.GetWindow

	/*
		for {
			process, err := os.FindProcess(int(sys.GetForegroundWindow()))
			if err != nil {
				fmt.Println(err)
				return
			}

			fmt.Println(process)
		}
	*/
}

/*
func selectRoutin() []string {

	return nil

}

/*
C:\Users\Vitto\go\pkg\src\golang.org\x\sys
C:\Users\Vitto\go\src\golang.org\x\sys
C:\Program Files\Go\src\golang.org\x\sys
*/
